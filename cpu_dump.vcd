$date
	Thu Mar  6 13:06:09 2014
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 1 ! hlt $end
$var reg 1 " clk $end
$var reg 1 # rst_n $end
$scope module DUT $end
$var wire 1 $ clk $end
$var wire 16 % dst_lcl [15:0] $end
$var wire 3 & func_lcl [2:0] $end
$var wire 1 ! hlt $end
$var wire 1 ' hlt_lcl $end
$var wire 16 ( instr_lcl [15:0] $end
$var wire 16 ) p0_lcl [15:0] $end
$var wire 16 * p1_lcl [15:0] $end
$var wire 1 + rst_n $end
$var wire 4 , shamt_lcl [3:0] $end
$var wire 16 - src0_lcl [15:0] $end
$var wire 1 . src1sel_lcl $end
$var wire 1 / zr_lcl $end
$scope module instruction_fetch $end
$var wire 1 $ clk $end
$var wire 1 ' hlt $end
$var wire 16 0 iaddr [15:0] $end
$var wire 16 1 instr [15:0] $end
$var wire 1 + rst_n $end
$scope module instr_mem $end
$var wire 16 2 addr [15:0] $end
$var wire 1 $ clk $end
$var wire 1 3 rd_en $end
$var reg 16 4 instr [15:0] $end
$upscope $end
$scope module program_counter $end
$var wire 1 $ clk $end
$var wire 1 ' hlt $end
$var wire 16 5 next_iaddr [15:0] $end
$var wire 1 + rst_n $end
$var reg 16 6 iaddr [15:0] $end
$upscope $end
$upscope $end
$scope module instruction_decode $end
$var wire 1 $ clk $end
$var wire 16 7 dst [15:0] $end
$var wire 4 8 dst_addr [3:0] $end
$var wire 3 9 func [2:0] $end
$var wire 1 ' hlt $end
$var wire 1 : hlt_lcl $end
$var wire 8 ; imm8 [7:0] $end
$var wire 16 < instr [15:0] $end
$var wire 16 = p0 [15:0] $end
$var wire 4 > p0_addr [3:0] $end
$var wire 16 ? p1 [15:0] $end
$var wire 4 @ p1_addr [3:0] $end
$var wire 1 A re0 $end
$var wire 1 B re1 $end
$var wire 1 + rst_n $end
$var wire 4 C shamt [3:0] $end
$var wire 1 . src1sel $end
$var wire 1 D we $end
$var wire 1 / zr $end
$scope module inst_decoder $end
$var wire 4 E dst_addr [3:0] $end
$var wire 3 F func [2:0] $end
$var wire 1 : hlt $end
$var wire 16 G instr [15:0] $end
$var wire 4 H opcode [3:0] $end
$var wire 4 I p0_addr [3:0] $end
$var wire 4 J p1_addr [3:0] $end
$var wire 1 A re0 $end
$var wire 1 B re1 $end
$var wire 4 K shamt [3:0] $end
$var wire 1 . src1sel $end
$var wire 1 D we $end
$var wire 1 / zr $end
$upscope $end
$scope module regF $end
$var wire 1 $ clk $end
$var wire 16 L dst [15:0] $end
$var wire 4 M dst_addr [3:0] $end
$var wire 1 : hlt $end
$var wire 4 N p0_addr [3:0] $end
$var wire 4 O p1_addr [3:0] $end
$var wire 1 A re0 $end
$var wire 1 B re1 $end
$var wire 1 D we $end
$var reg 4 P dst_addr_lat [3:0] $end
$var reg 16 Q dst_lat [15:0] $end
$var integer 32 R indx [31:0] $end
$var reg 16 S p0 [15:0] $end
$var reg 16 T p1 [15:0] $end
$var reg 1 U we_lat $end
$upscope $end
$upscope $end
$scope module execution $end
$var wire 16 V dst [15:0] $end
$var wire 3 W func [2:0] $end
$var wire 8 X imm8 [7:0] $end
$var wire 16 Y p1 [15:0] $end
$var wire 4 Z shamt [3:0] $end
$var wire 16 [ src0 [15:0] $end
$var wire 16 \ src1_lcl [15:0] $end
$var wire 1 . src1sel $end
$var wire 1 / zr $end
$scope module source_mux $end
$var wire 8 ] imm8 [7:0] $end
$var wire 16 ^ p1 [15:0] $end
$var wire 16 _ src1 [15:0] $end
$var wire 1 . src1sel $end
$upscope $end
$scope module arithmetic_logic_unit $end
$var wire 17 ` arithmetic_temp [16:0] $end
$var wire 16 a dst [15:0] $end
$var wire 1 b exception $end
$var wire 3 c ops [2:0] $end
$var wire 1 d ov $end
$var wire 1 e ov_neg $end
$var wire 1 f ov_pos $end
$var wire 4 g shamt [3:0] $end
$var wire 16 h src0 [15:0] $end
$var wire 16 i src1 [15:0] $end
$var wire 17 j temp_dst [16:0] $end
$var wire 1 / zr $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx j
bx i
bz h
bx g
xf
xe
xd
bx c
xb
bx a
bx `
bx _
bx ^
bx ]
bx \
bz [
bx Z
bx Y
bx X
bx W
bx V
xU
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
xD
bx C
xB
xA
bx @
bx ?
bx >
bx =
bx <
bz ;
x:
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
13
bx 2
bx 1
bx 0
x/
x.
bz -
bx ,
1+
bx *
bx )
bx (
x'
bx &
bx %
0$
1#
0"
z!
$end
#5
1"
1$
#10
0"
0$
#15
1"
1$
#20
0"
0$
#25
1"
1$
#30
0"
0$
#35
1"
1$
#40
0"
0$
#45
1"
1$
#50
0"
0$
#55
1"
1$
#60
0"
0$
#65
1"
1$
#70
0"
0$
#75
1"
1$
#80
0"
0$
#85
1"
1$
#90
0"
0$
#95
1"
1$
#100
0"
0$
#105
1"
1$
